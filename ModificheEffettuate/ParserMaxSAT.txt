Aggiunta la funzione ParseASPifFormula che si occupa di fare il parsing del file ASPif in ingresso per poter leggere le regole
modificata anche la lettura del parser in modo tale che possa inserire all'interno della maxsatformula i letterali di corpo e testa.

template <class B, class MaxSATFormula>
static void parseASPifFormula(B &in, MaxSATFormula *maxsat_formula) {


    char *rule[100];
    int rule_size = 0;

    for(;;) {
        skipWhitespace(in);
        
        if(*in == EOF) {
            printf("Reached EOF\n");
            break;
        }
        else{
          char token[256];
          int token_index = 0;

          rule_size = 0;
          // Tokenize the line
          while (*in != '\n' && *in != EOF) {
              if (*in == ' ' || *in == '\t') {
                  if (token_index > 0) {
                      token[token_index] = '\0';
                      rule[rule_size] = strdup(token);  // Store token
                      rule_size++;
                      token_index = 0;
                  }
              } else {
                  token[token_index++] = *in;
              }
              ++in;
          }
          
          // Handle the last token
          if (token_index > 0) {
              token[token_index] = '\0';
              rule[rule_size] = strdup(token);
              rule_size++;
          }

          

          // Process the rule if it starts with "1"
          if (rule_size > 0 && strcmp(rule[0], "1") == 0) {
              // Determine if the rule is disjunctive
              int isDisjunctive = strcmp(rule[1], "0") == 0;
              if (!isDisjunctive) {
                  fprintf(stderr, "ERROR!\nChoice rule is not acceptable\nChange the rule in a disjunction one\n");
                  exit(1);
              }

              // Extract head elements
              int numHeadElements = atoi(rule[2]);
              char **headElements = &rule[3];
              printf("Extracted head elements\n");
              

              // Extract body elements
              int index = 3 + numHeadElements + 1;
              int numBodyElements = atoi(rule[index]);
              char **bodyElements = &rule[index + 1];
              printf("Extracted body elements\n");

              // Convert head and body elements to literals
                vec<Lit> lits;
                for (int i = 0; i < numHeadElements; i++) {
                    int var = abs(atoi(headElements[i])) - 1;
                    while (var >= maxsat_formula->nVars()) maxsat_formula->newVar();
                    lits.push((atoi(headElements[i]) > 0) ? mkLit(var) : ~mkLit(var));
                }
                for (int i = 0; i < numBodyElements; i++) {
                    int var = abs(atoi(bodyElements[i])) - 1;
                    while (var >= maxsat_formula->nVars()) maxsat_formula->newVar();
                    lits.push(~((atoi(bodyElements[i]) > 0) ? mkLit(var) : ~mkLit(var))); // Negate body elements
                }

                // Add the disjunction rule as a hard clause
                maxsat_formula->addHardClause(lits);
                printf("Added disjunction rule as a hard clause\n");
                
              

              // Debugging output (optional)
              printf("Rule type: disjunction\n");
              printf("Head: ");
              for (int i = 0; i < numHeadElements; i++) {
                  printf("%s ", headElements[i]);
              }
              printf("\n");
              

              if (numBodyElements > 0) {
                  printf("Body: ");
                  for (int i = 0; i < numBodyElements; i++) {
                      printf("%s ", bodyElements[i]);
                  }
                  printf("\n");
              }
              printf("\n");
              
          }

          // Free memory
          for (int i = 0; i < rule_size; i++) {
              free(rule[i]);
          }
    }
    }


    // Set problem type based on parsed data
    if (maxsat_formula->getMaximumWeight() == 1)
        maxsat_formula->setProblemType(_UNWEIGHTED_);
    else
        maxsat_formula->setProblemType(_WEIGHTED_);
    printf("Number of hard clauses: %d\n", maxsat_formula->nHard());
    printf("Problem type: %d\n", maxsat_formula->getProblemType());
    printf("Parsing complete.\nNot exit anymore, just the normal solver\n");
}